

Documentation:


BACKEND FOR USER DATA

Backend is written with Node.js [1]. Node.js is an open-source, cross-platform, back-end, JavaScript runtime environment that executes JavaScript code outside a web browser. Node.js represents a "JavaScript everywhere" paradigm, unifying web-application development around a single programming language, rather than different languages for server- and client-side scripts.

Backend stores user data into MongoDB [2] database. Backend uses Mongoose, MongoDB object modeling for Node.js. "Mongoose provides a straight-forward, schema-based solution to model your application data. It includes built-in type casting, validation, query building, business logic hooks and more, out of the box." [3]

Almost all backend API calls are verified with JSON Web Token (JWT) [4] to protect from unauthorized use.
The JWT is created at server and sent to client during successful login. Client stores and uses it in following communication between client and server.

At login the token is created. It is valid for 24 hours:


const token = jwt.sign(
  {
    email:user[0].email,
    userId: user[0]._id
  },
  process.env.JWT_KEY,
  {
    expiresIn: "24h"
  }
)


References

1. https://nodejs.org/en/
2. https://www.mongodb.com/
3. https://mongoosejs.com/
4. https://www.npmjs.com/package/jsonwebtoken



Middleware function "checkAuth" is called first to verify and decode the user data encoded into token.

----------------------------------|---------------------------|------------------------|-----------------------------------
  DESCRIPTION                     |  PARAMS                   |  SUCCESS               |  ERROR
----------------------------------|---------------------------|------------------------|-----------------------------------
 Verifies token given in request. | req.headers.authorization | req.userData['userId'] | status 401 {message:'Auth failed'}
                                  |                           | req.userData['email']  |
----------------------------------|---------------------------|------------------------|-----------------------------------


Following models and routes are used:

User model:
_id                    ObjectId
email                  String
password               String
created                Date
regcode                reference to Regcode
readkey                reference to Readkey
price_energy_monthly   Number
price_energy_basic     Number
price_energy_transfer  Number
is_superuser           Boolean

User routes:
------------------------|------------------------------------|---------------------------|-------------------------------------|------------------------------------
  ROUTE                 |  DESCRIPTION                       |  PARAMS                   |  SUCCESS                            |  ERROR
------------------------|------------------------------------|---------------------------|-------------------------------------|------------------------------------
POST '/users/signup'    | Create and save a new USER.        | req.body.email            | 201 {message:'User created'}        | status 409 {message:'This email already exists'}
                        | 1. Check that email is not         | req.body.password         |                                     | status 404 {message:'Regcode Expired'}
                        |    already used.                   | req.body.regcode          |                                     | status 404 {message:'Email and Regcode Not Matching'}
                        | 2. Find the REGCODE from database. |                           |                                     | status 404 {message:'Regcode Not Found'}
                        | 3. Check that emails match.        |                           |                                     | status 500 {error:err}
                        | 4. Check that current timestamp is |                           |                                     |
                        |    between startdate and enddate.  |                           |                                     |
                        | 5. Create READKEY and USER.        |                           |                                     |
------------------------|------------------------------------|---------------------------|-------------------------------------|------------------------------------
POST '/users/login'     | Find the USER from database with   | req.body.email            | status 200                          | status 401 {message:'Auth failed'}
                        | given email. Compare passwords and | req.body.password         | {message:'Auth successful',         | status 500 {error:err}
                        | if they match create and return a  |                           |   token:...,userId:...,created:..., |
                        | token with other user data.        |                           |   readkey:...,is_superuser:...}     |
------------------------|------------------------------------|---------------------------|-------------------------------------|------------------------------------
POST '/users/changepsw' | Uses checkAuth middleware          | req.headers.authorization | status 200                          | status 401 {message:'Auth failed'}
                        | If the current user is a SUPERUSER | req.body.email            | {message:'Password is now changed'} | status 404 {message:'Not Found'}
                        | password can be changed without    | req.body.newpassword      |                                     | status 500 {error:err}
                        | oldpassword.                       | req.body.oldpassword      |                                     |
------------------------|------------------------------------|---------------------------|-------------------------------------|------------------------------------
PUT '/users/:userId'    | Uses checkAuth middleware          | req.headers.authorization | status 200                          | status 401 {message:'Auth failed'}
                        | API-call to modify energy prices   | req.body is an array of   | {message:'user updated'}            | status 404 {message:'Nothing to update'}
                        | of logged-in user.                 | {propName, value} -pairs. |                                     | status 500 {error:err}
------------------------|------------------------------------|---------------------------|-------------------------------------|------------------------------------
GET '/users'            | Get a list of all USERS.           | req.headers.authorization | status 200 {count:...,users:[...]}  | status 401 {message:'Auth failed'}
                        | Uses checkAuth middleware.         |                           |                                     | status 500 {error: err}
                        |   select('_id email created        |                           |                                     |
                        |     regcode readkey')              |                           |                                     |
                        |       populate('regcode')          |                           |                                     |
                        |       populate('readkey')          |                           |                                     |
                        | For ADMIN usage                    |                           |                                     |
------------------------|------------------------------------|---------------------------|-------------------------------------|------------------------------------

Regcode model:
_id                    ObjectId
email                  String
apartmentId            String
code                   String
startdate              Date
enddate                Date

Regcode routes:

---------------------------|---------------------------------|---------------------------|------------------------------------------|------------------------------------
  ROUTE                    |  DESCRIPTION                    |  PARAMS                   |  SUCCESS                                 |  ERROR
---------------------------|---------------------------------|---------------------------|------------------------------------------|------------------------------------
GET '/regcodes'            | Get a list of all REGCODES.     | req.headers.authorization | status 200 {count:...,regcodes:[...]}    | status 401 {message:'Auth failed'}
                           | Uses checkAuth middleware.      |                           |                                          | status 500 {error: err}
                           |   select('_id email apartmentId |                           |                                          |
                           |     code startdate enddate')    |                           |                                          |
                           | For ADMIN usage                 |                           |                                          |
---------------------------|---------------------------------|---------------------------|------------------------------------------|------------------------------------
POST '/regcodes'           | Create and save a new REGCODE.  | req.headers.authorization | status 201                               | status 401 {message:'Auth failed'}
                           | Uses checkAuth middleware.      | req.body.email            | {message:'Created regcode successfully', | status 409 {message:'This email already exists'}
                           | For ADMIN usage                 | req.body.code             |   _id:...,email:...,apartmentId:...,     | status 500 {error: err}
                           |                                 | req.body.apartmentId      |   code:...,startdate:...,enddate:...}    |
                           |                                 | req.body.startdate        |                                          |
                           |                                 | req.body.enddate          |                                          |
---------------------------|---------------------------------|---------------------------|------------------------------------------|------------------------------------
PUT '/regcodes/:regcodeId' | Update REGCODE startdate and    | req.headers.authorization | status 200 {message:'Regcode updated'}   | status 401 {message:'Auth failed'}
                           | enddate.                        | req.params.regcodeId      |                                          | status 500 {error: err}
                           | Uses checkAuth middleware.      | req.body.startdate        |                                          |
                           | For ADMIN usage                 | req.body.enddate          |                                          |
---------------------------|---------------------------------|---------------------------|------------------------------------------|------------------------------------

Readkey model:
_id                    ObjectId
startdate              Date
enddate                Date

Readkey routes:

---------------------------|-----------------------------------|---------------------------|----------------------------------------|------------------------------------
  ROUTE                    |  DESCRIPTION                      |  PARAMS                   |  SUCCESS                               |  ERROR
---------------------------|-----------------------------------|---------------------------|----------------------------------------|------------------------------------
GET '/readkeys'            | Get a list of all READKEYS.       | req.headers.authorization | status 200 {count:...,readkeys:[...]}  | status 401 {message:'Auth failed'}
                           | Uses checkAuth middleware.        |                           |                                        | status 500 {error: err}
                           |   select('_id startdate enddate') |                           |                                        |
                           | For ADMIN usage                   |                           |                                        |
                           |                                   |                           |                                        |
---------------------------|-----------------------------------|---------------------------|----------------------------------------|------------------------------------
PUT '/readkeys/:readkeyId' | Update READKEY startdate and      | req.headers.authorization | status 200 {message:'Readkey updated'} | status 401 {message:'Auth failed'}
                           | enddate.                          | req.params.readkeyId      |                                        | status 500 {error: err}
                           | Uses checkAuth middleware.        | req.body.startdate        |                                        |
                           | For ADMIN usage                   | req.body.enddate          |                                        |
---------------------------|-----------------------------------|---------------------------|----------------------------------------|------------------------------------

NOTE that there is no API-call to create a READKEY. This is because READKEY is automatically created when the USER registers (at signup).
The READKEY is the MongoDB ObjectId of the Readkey model (_id), 12-byte hexadecimal string, for example: "5f75d08b251f6e38b8a6a736".


Feedback routes:

------------------|-----------------------------------|---------------------------|-----------------------------------|-----------------------------------
  ROUTE           |  DESCRIPTION                      |  PARAMS                   |  SUCCESS                          |  ERROR
------------------|-----------------------------------|---------------------------|-----------------------------------|-----------------------------------
GET '/feedbacks'  | Get a list of all FEEDBACKS for   | req.headers.authorization | status 200 {                      | status 401 {message:'Auth failed'}
                  | current user.                     |                           |   count:...,                      | status 500 {error: err}
                  | Uses checkAuth middleware.        |                           |   feedbacks:[...]                 |
                  |   select('_id userId feedbackType |                           | }                                 |
                  |     created feedback')            |                           |                                   |
                  |                                   |                           |                                   |
------------------|-----------------------------------|---------------------------|-----------------------------------|-----------------------------------
POST '/feedbacks' | Create and save a new FEEDBACK.   | req.headers.authorization | status 200 {                      | status 401 {message:'Auth failed'}
                  | Uses checkAuth middleware.        | req.body.refToUser        |   message:'Feedback submitted OK' | status 500 {error: err}
                  |                                   | req.body.feedbackType     | }                                 |
                  |                                   | req.body.feedback         |                                   |
------------------|-----------------------------------|---------------------------|-----------------------------------|-----------------------------------



Log routes:

------------------|-----------------------------------|---------------------------|-----------------------------------|-----------------------------------
  ROUTE           |  DESCRIPTION                      |  PARAMS                   |  SUCCESS                          |  ERROR
------------------|-----------------------------------|---------------------------|-----------------------------------|-----------------------------------
GET '/logs'       | Get a list of all LOGS.           | req.headers.authorization | status 200 {                      | status 401 {message:'Auth failed'}
                  | Uses checkAuth middleware.        |                           |   count:...,                      | status 500 {error: err}
                  |   select('_id userId eventType    |                           |   logs: [...]                     |
                  |     created')                     |                           | }                                 |
                  |       populate('userId')          |                           |                                   |
                  | For ADMIN usage                   |                           |                                   |
------------------|-----------------------------------|---------------------------|-----------------------------------|-----------------------------------
POST '/logs'      | Create and save a new LOG.        | req.headers.authorization | status 200 {                      | status 401 {message:'Auth failed'}
                  | Uses checkAuth middleware.        | req.body.refToUser        |   message:'Logout logged'         | status 500 {error: err}
                  |                                   | req.body.eventType        | }                                 |
------------------|-----------------------------------|---------------------------|-----------------------------------|-----------------------------------

NOTE: 'Login' is now submitted directly from "users/login" route. No need to POST via this API.




Visitorcount routes:

----------------------|-------------------------------------|-----------------|------------------------------|-----------------------------
  ROUTE               |  DESCRIPTION                        |  PARAMS         |  SUCCESS                     |  ERROR
----------------------|-------------------------------------|-----------------|------------------------------|-----------------------------
GET '/visitorcounts'  | Get a list of all visitorcounts.    |                 | status 200 {                 | status 500 {error: err}
                      | Uses checkAuth middleware.          |                 |   count: count               |
                      |   select('_id created')             |                 | }                            |
                      |                                     |                 |                              |
----------------------|-------------------------------------|-----------------|------------------------------|-----------------------------
POST '/visitorcounts' | Create and save a new Visitorcount. |                 | status 200 {                 | status 500 {error: err}
                      |                                     |                 |   message:'OK'               |
                      |                                     |                 | }                            |
----------------------|-------------------------------------|-----------------|------------------------------|-----------------------------






router.get('/', (req,res,next)=>{
	Visitorcount.find()
		.select('_id created')
		.exec()
		.then(docs=>{
			res.status(200).json({
				count: docs.length





router.post("/", (req,res,next)=>{
	
	const vc = new Visitorcount({
		_id: new mongoose.Types.ObjectId()
	});
	vc.save()
		.then(result=>{
			const msg = 'OK';
			res.status(200).json({message:msg});
		})
		.catch(err=>{
			if (typeof err.message !== 'undefined') {
				console.log(err.message);
			}
			res.status(500).json({error:err});
		});




Bindings routes:

------------------------|-----------------------------------|---------------------------|-------------------------------------|------------------------------------
  ROUTE                 |  DESCRIPTION                      |  PARAMS                   |  SUCCESS                            |  ERROR
------------------------|-----------------------------------|---------------------------|-------------------------------------|------------------------------------
GET '/bindings'         | Get a list of all BINDINGS.       | req.headers.authorization | status 200 {bindings:[...]}         | status 401 {message:'Auth failed'}
                        | Uses checkAuth middleware.        |                           |                                     | status 500 {error: err}
                        |   select('_id email created       |                           |                                     |
                        |     regcode readkey')             |                           |                                     |
                        |       populate('regcode')         |                           |                                     |
                        |       populate('readkey')         |                           |                                     |
                        | For SERVER usage                  |                           |                                     |
------------------------|-----------------------------------|---------------------------|-------------------------------------|------------------------------------

NOTE: Return ONLY those bindings that have a readkey and apartmentId and have a valid readkey (now is between startdate and enddate).
Here is an example of RESPONSE: { "bindings" : [ { "apartmentId" : "123", "readkey" : "5f75d08b251f6e38b8a6a736" }, { "apartmentId" : "333ded", "readkey" : "5f8589ff1e6aae446ca9443a" } ] }


Following two routes ('/apartments' and '/feeds') just re-route the request URL adding Authorization into call.

Apartments routes:
-------------------------|----------------------------------|---------------------------|-------------------------------------|------------------------------------
  ROUTE                  |  DESCRIPTION                     |  PARAMS                   |  SUCCESS                            |  ERROR
-------------------------|----------------------------------|---------------------------|-------------------------------------|------------------------------------
POST '/apartments/feeds' | Fetch data from one apartment.   | req.headers.authorization | status 200 {parsedData}             | status 401 {message:'Auth failed'}
                         | If READKEY is valid, make a      | req.body.readkey          |                                     | status 404 {message: 'Readkey Expired'}
                         | HTTPS GET with given params.     | req.body.url              |                                     | status 404 {message:'Readkey not found'}
                         | Uses checkAuth middleware.       | req.body.type             |                                     | status 500 {error: err}
                         |                                  | req.body.limit            |                                     |
                         |                                  | req.body.start            |                                     |
                         |                                  | req.body.end              |                                     |
-------------------------|----------------------------------|---------------------------|-------------------------------------|------------------------------------
NOTE: The READKEY identifies apartment and user. 

Feeds routes:
----------------------|-------------------------------------|---------------------------|-------------------------------------|------------------------------------
  ROUTE               |  DESCRIPTION                        |  PARAMS                   |  SUCCESS                            |  ERROR
----------------------|-------------------------------------|---------------------------|-------------------------------------|------------------------------------
POST '/feeds'         | Fetch data from S-Market.           | req.headers.authorization | status 200 {parsedData}             | status 401 {message:'Auth failed'}
                      | Make a HTTPS GET with given params. | req.body.url              |                                     | status 500 {error: err}
                      | Uses checkAuth middleware.          |                           |                                     | 
----------------------|-------------------------------------|---------------------------|-------------------------------------|------------------------------------


NOTE: There are 3 different types of calls to S-Market data:
1. GET backend + '/' + 'data/arina/iss/status'
  - Returns latest status (JSON) for all meterId's, it is an array of objects, for example:
    [{ "meterId":101,
      "meterName":"JK_101_LVI_sahko",
      "meterType":1,
      "dateTime":"2020-10-22 11:14:19",
      "energy":22769.255,
      "avPower":1.948,
      "timeDiff":61,
      "energyDiff":0.033 }, ... ]
2. GET backend + '/' + 'data/arina/iss/feeds.json?meterId=NNN' + '&start=YYYY-MM-DD&end=YYYY-MM-DD'
3. GET backend + '/' + 'data/arina/iss/feeds.json?calc=1&meterId=NNN' + '&start=YYYY-MM-DD&end=YYYY-MM-DD'
  - Returns all measurements for given meterId and timerange, for example:
    [{"created_at":"2020-10-22T00:00:20","meterId":101,"averagePower":0.286,"totalEnergy":22752.098,"energyDiff":0.005 }, ... ]
  - The mesurement frequency is 1 sample per minute, so there are 1440 measurements for each day.
  - The "calc=1" parameter is needed in meterId=117 (Cooler117Model) and meterId=115 (GeothermalModel).









FRONTEND







Frontend is written with ECMAScript (AKA JavaScript) [1]. ECMAScript is a general-purpose programming language, standardized by Ecma International according to the document ECMA-262. It is a JavaScript standard meant to ensure the interoperability of Web pages across different Web browsers. ECMAScript is commonly used for client-side scripting on the World Wide Web, and it is increasingly being used for writing server applications and services using Node.js.

The 6th edition, initially known as ECMAScript 6 (ES6) then and later renamed to ECMAScript 2015, adds significant new syntax for writing complex applications, including class declarations, ES6 modules like import and export. ES6 is therefore well suited to implement modular software design patterns like Model–view–controller (usually known as MVC) [2].

MVC is a software design pattern commonly used for developing user interfaces that divides the related program logic into three interconnected elements. This is done to separate internal representations of information from the ways information is presented to and accepted from the user. Traditionally used for desktop graphical user interfaces (GUIs), this pattern has become popular for designing web applications.

Another pattern used in Making City frontend is the observer pattern [3]. It is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.


Figure N.N Observer Design Pattern. File:1920px-Observer_w_update.svg.png [4]



In our case Models are Subjects, which call notify()-method on Views (or Controllers) which are Observers. Model calls notify()-method when new data is fetched or updated, then those views and controllers which are registered as observers to that model will execute their notify()-method.



Scalable Vector Graphics (SVG) [5] is used extensively in 
In the heart of Making City UI 
MENU, User Page, PED page, S-Market, Sivakka 1,2,3 YIT 1 
8 pages SVG

Scalable Vector Graphics (SVG) [5] is an Extensible Markup Language (XML)-based vector image format for two-dimensional graphics with support for interactivity and animation. The SVG specification is an open standard developed by the World Wide Web Consortium (W3C) since 1999. 



Responsive web design (RWD) is an approach to web design that makes web pages render well on a variety of devices and window or screen sizes.[6][7]


Figure N.N File: RWDMC.jpg





MasterController keeps track of ALL controllers and Models in the FRONTEND.
It has two instance properties to do that:
	this.controllers = {};
	this.modelRepo = new ModelRepo();
The ModelRepo is just a collection of (key, value) pairs, such that each possible key appears at most once in the collection.


First the MasterController creates all controllers and adds them to its controllers hash, for example:
	this.controllers['DAB'] = new DistrictABController({name:'DAB', master:this, el:'#content', visible:false});
	this.controllers['DAB'].init();

The init()-method creates all models and a view for this Controller.

For example here is how a SolarModel is added to modelRepo in "SolarController":
	const model = new SolarModel({name:'SolarModel',src:'data/arina/iss/feeds.json?meterId=116'});
	model.subscribe(this);
	this.master.modelRepo.add('SolarModel',model);
	this.models['SolarModel'] = model;

And a timer is defined for periodic fetching of data for "SolarModel":
	this.timers['SolarChartView'] = {timer: undefined, interval: 30000, models:['SolarModel']};
It is important to notice here that one chart can display data from multiple models, but one chart can have only one timer.

We also have to listen MenuModel for View changes from USER:
	this.models['MenuModel'] = this.master.modelRepo.get('MenuModel');
	this.models['MenuModel'].subscribe(this);

If there are many charts in one view, a Controller creates a WrapperView, which holds all subviews.
So finally a WrapperView is created and shown (if this controller is visible):
	this.view = new DistrictABWrapperView(this);
	this.show();

Actually Controller's show() -method shows view and starts the poller:
	this.view.show();
	this.startPollers();
Which starts polling all timers for this controller. 
This is important, because all views must always show "the latest" data fetched from the server.
When a view is shown (=rendered), it first creates a skeleton of HTML markup, where empty data-placeholders are inserted into parent element. 
If all models are ready (areModelsReady()) then also the data is available and it is appended into placeholders. 
But if all models are NOT ready we show a Wait-spinner and wait for Model to trigger "fetched" notification. The models (one or many) also notify View whenever new data is fetched. So the chart update can happen "out-of-sync", one model at a time. 







References

1. https://en.wikipedia.org/wiki/ECMAScript
2. https://en.wikipedia.org/wiki/Model-view-controller
3. https://en.wikipedia.org/wiki/Observer_pattern
4. Observer Design Pattern SVG By Gregorybleiker - Own work, CC BY-SA 4.0, https://commons.wikimedia.org/w/index.php?curid=65617132
5. https://en.wikipedia.org/wiki/Scalable_Vector_Graphics
6. https://en.wikipedia.org/wiki/Responsive_web_design
7. https://alistapart.com/article/responsive-web-design/




MAINPAGE
- language selection (fi,en)
- link to project page

- The User Home Page
  - User Properties
    - Energy price
  - User Apartment Electricity
    - Consumption (kWh, €, kgCO2) for periods: 24h, Week, Month
      - Charts         for 1 to 7 days OK
      - Targets        TODO
      - Compensate     TODO?
  - User Apartment Water
    - Consumption (HOT, COLD, €, kgCO2) for periods: 24h, Week, Month
      - Charts         for 1 to 7 days OK
      - Targets        TODO
      - Compensate     TODO?
  - User Apartment Heating
    - Consumption (kWh, €, kgCO2) for periods: 24h, Week, Month
      - Charts         for 1 to 7 days OK
      - Targets        TODO
      - Compensate     TODO?
- The Solar Page       TODO
- The Grid Page        TODO
- The Environment Page TODO
- PED AREA
  - S-Arina
      - Grid
      - Solar power
      - Geothermal power
      - Compressors
      - Lights and appliances
      - Kitchen appliances
      - HPAC
      - Other
      - Cooler equipment
      - Cooling
      - Heating
      - District heating network
  - Sivakka 1          TODO
  - Sivakka 2          TODO
  - Sivakka 3          TODO
  - YIT 1              TODO


Fetching apartment data

Fetching one measurement


Fetching an array of measurements





The measurement database contains measurements one minute interval.
We fetch only one measurement (limit=1) for four short (2 minute) timeranges, which are "Now", "Day", "Week" and "Month". Type can be 'sensor' or 'energy' or 'water'.
REST-API returns the latest value.


UserPageController
--------------------------|---------|---------|-------------------------------------------------------------
  MODEL NAME              |  TYPE   |  LIMIT  |  RANGE 
--------------------------|---------|---------|-------------------------------------------------------------
UserWaterNowModel         |  water  |    1    |  {ends:{value:10,unit:'seconds'},starts:{value:2,unit:'minutes'}
UserHeatingNowModel       |  sensor |    1    |  {ends:{value:10,unit:'seconds'},starts:{value:2,unit:'minutes'}
UserElectricityNowModel   |  energy |    1    |  {ends:{value:10,unit:'seconds'},starts:{value:2,unit:'minutes'}
UserWaterDayModel         |  water  |    1    |  {ends:{value:24,unit:'hours'},starts:{value:2,unit:'minutes'}
UserElectricityDayModel   |  energy |    1    |  {ends:{value:24,unit:'hours'},starts:{value:2,unit:'minutes'}
--------------------------|---------|---------|-------------------------------------------------------------

UserElectricityController
--------------------------|---------|---------|-------------------------------------------------------------
  MODEL NAME              |  TYPE   |  LIMIT  |  RANGE 
--------------------------|---------|---------|-------------------------------------------------------------
UserElectricityWeekModel  | energy  |    1    |  {ends:{value:7,unit:'days'},starts:{value:60,unit:'minutes'}
UserElectricityMonthModel | energy  |    1    |  {ends:{value:1,unit:'months'},starts:{value:60,unit:'minutes'}
--------------------------|---------|---------|-------------------------------------------------------------

UserWaterController
--------------------------|---------|---------|-------------------------------------------------------------
  MODEL NAME              |  TYPE   |  LIMIT  |  RANGE 
--------------------------|---------|---------|-------------------------------------------------------------
UserWaterWeekModel        | water   |    1    |  {ends:{value:7,unit:'days'},starts:{value:60,unit:'minutes'}
UserWaterMonthModel       | water   |    1    |  {ends:{value:1,unit:'months'},starts:{value:60,unit:'minutes'}
--------------------------|---------|---------|-------------------------------------------------------------


UserElectricityChartsController
--------------------------|---------|---------|-------------------------------------------------------------
  MODEL NAME              |  TYPE   |  LIMIT  |  RANGE 
--------------------------|---------|---------|-------------------------------------------------------------
UserElectricityALLModel   | energy  |    0    |  {ends:{value:10,unit:'seconds'},starts:{value:1,unit:'days'}
--------------------------|---------|---------|-------------------------------------------------------------

UserWaterChartsController
--------------------------|---------|---------|-------------------------------------------------------------
  MODEL NAME              |  TYPE   |  LIMIT  |  RANGE 
--------------------------|---------|---------|-------------------------------------------------------------
UserWaterALLModel         |  water  |    0    |  {ends:{value:10,unit:'seconds'},starts:{value:1,unit:'days'}
--------------------------|---------|---------|-------------------------------------------------------------

UserHeatingChartsController
--------------------------|---------|---------|-------------------------------------------------------------
  MODEL NAME              |  TYPE   |  LIMIT  |  RANGE 
--------------------------|---------|---------|-------------------------------------------------------------
UserHeatingALLModel       |  sensor |    0    |  {ends:{value:10,unit:'seconds'},starts:{value:1,unit:'days'}
--------------------------|---------|---------|-------------------------------------------------------------

NOTE: For charts, where all values for specified range are fetched (LIMIT=0), we must snap range to previous FULL HOUR value.
Therefore we are one hour behind real-time in the worst case. User can select range between 1 (=default) to 7 days from the user interface.







With these four "totalEnergy" values we can calculate energy consumption for last 24 hours, last week and last month.

For example URL for "NOW" is (returned values are always the last ones):
{"url":"https://makingcity.vtt.fi/data/sivakka/apartments/feeds.json","readkey":"5f75d08b251f6e38b8a6a736","type":"energy","limit":1,"start":"2020-10-22T15:39","end":"2020-10-22T15:49"}
URL for "NOW-24HOURS" is:
{"url":"https://makingcity.vtt.fi/data/sivakka/apartments/feeds.json","readkey":"5f75d08b251f6e38b8a6a736","type":"energy","limit":1,"start":"2020-10-21T15:39","end":"2020-10-21T15:49"}
URL for "NOW-7DAYS" is:
{"url":"https://makingcity.vtt.fi/data/sivakka/apartments/feeds.json","readkey":"5f75d08b251f6e38b8a6a736","type":"energy","limit":1,"start":"2020-10-15T15:39","end":"2020-10-15T15:49"}
URL for "NOW-1MONTH" is:
{"url":"https://makingcity.vtt.fi/data/sivakka/apartments/feeds.json","readkey":"5f75d08b251f6e38b8a6a736","type":"energy","limit":1,"start":"2020-09-22T15:39","end":"2020-09-22T15:49"}

and the RESPONSE is like this:
[{"created_at":"2020-10-15T15:46:38","residentId":1,"apartmentId":101,"meterId":1001,"averagePower":420,"totalEnergy":425.019,"impulseLastCtr":7,"impulseTotalCtr":425019}]

NOTE: If there is no data for specified timerange, the return value is a string: "No data!".












RESPONSE:

EXAMPLE RESPONSE:
{
"count":4,
"users":[
 {"_id":"5f75cff0251f6e38b8a6a733","email":"timo.kinnunen@vtt.fi","created":"2020-10-01T12:47:44.259Z"},
 {"_id":"5f75d010251f6e38b8a6a734","email":"sivakka@vtt.fi","created":"2020-10-01T12:48:16.411Z"},
 {"_id":"5f75d08b251f6e38b8a6a737","email":"snoopy@vtt.fi","created":"2020-10-01T12:50:19.865Z",
  "regcode":{"_id":"5f75d04e251f6e38b8a6a735","email":"snoopy@vtt.fi","apartmentId":"123","code":"fzyjw6","startdate":"2020-09-30T21:00:00.000Z","enddate":"2020-10-27T22:00:00.000Z","__v":0},
  "readkey":{"_id":"5f75d08b251f6e38b8a6a736","startdate":"2020-09-30T21:00:00.000Z","enddate":"2020-10-27T22:00:00.000Z","__v":0}
 },
 {"_id":"5f8589ff1e6aae446ca9443b","email":"charlie@vtt.fi","created":"2020-10-13T11:05:35.426Z",
  "regcode":{"_id":"5f8589b51e6aae446ca94439","email":"charlie@vtt.fi","apartmentId":"333ded","code":"m9yxum","startdate":"2020-10-12T21:00:00.000Z","enddate":"2020-10-27T22:00:00.000Z","__v":0},
  "readkey":{"_id":"5f8589ff1e6aae446ca9443a","startdate":"2020-10-12T21:00:00.000Z","enddate":"2020-10-27T22:00:00.000Z","__v":0}
 }
]
}
 
 {
 count: docs.length,
    users: docs.map(doc=>{
     return {
      _id: doc._id,
      email: doc.email,
      created: doc.created,
      regcode: doc.regcode,
      readkey: doc.readkey
     }
    })



FRONTEND EXAMPLE
For example, when new Regcode is created, an Authorization HEADER is constructed like this:
   
   const myHeaders = new Headers();
   const authorizationToken = 'Bearer '+token;
   myHeaders.append("Authorization", authorizationToken);
   myHeaders.append("Content-Type", "application/json");
   const myPost = {
    method: 'POST',
    headers: myHeaders,
    body: JSON.stringify(data)
   };
   const myRequest = new Request(this.mongoBackend + '/regcodes', myPost);
   fetch(myRequest)
    ...

https://makingcity.vtt.fi/data/sivakka/apartments/feeds.json?apiKey=12E6F2B1236A&type=water&limit=1&start=2020-10-25T10:06&end=2020-10-25T10:16
https://makingcity.vtt.fi/data/sivakka/apartments/feeds.json?apiKey=12E6F2B1236A&type=energy&limit=1&start=2020-10-26T09:32&end=2020-10-26T10:32





How many values are there in power chart if interval is one minute?
How many values are there in energy chart if interval is one hour?
days         power       energy
 1            1440        24
 2            2880        48
 3            4320        72
 4            5760        96
 5            7200       120
 6            8640       144
 7           10080       168
14           20160       336
28           40320       672



